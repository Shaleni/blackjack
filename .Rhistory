counter <- counter + 1
}
}
}
}
#finish hand of dealer
while(!d[[2]]){
d<-dealer(deck[counter],F)
countCard(deck[counter])
counter <- counter + 1
}
totalBet <- totalBet + gameBet
#get the results of the game
if(split){
if(dDown){
r<-checkForWinner(unlist(p[1]),unlist(d[1]),p2[[1]], doublingdown=TRUE, tc=tc)
#r<-checkForWinnerVerbose(unlist(p[1]),unlist(d[1]),p2[[1]], doublingdown=TRUE, tc=tc)
} else{
r<-checkForWinner(unlist(p[1]),unlist(d[1]),p2[[1]], tc=tc)
#r<-checkForWinnerVerbose(unlist(p[1]),unlist(d[1]),p2[[1]], tc=tc)
}
results <- results+r
} else{
if(dDown){
r<-checkForWinner(unlist(p[1]),unlist(d[1]), doublingdown=T, tc=tc)
#r<-checkForWinnerVerbose(unlist(p[1]),unlist(d[1]), doublingdown=T, tc=tc)
} else {
r<-checkForWinner(unlist(p[1]),unlist(d[1]), tc=tc)
#r<-checkForWinnerVerbose(unlist(p[1]),unlist(d[1]), tc=tc)
}
results <- results+r
}
#deal first card of next game to player and dealer
p<-playerS5(deck[counter],T)
countCard(deck[counter])
counter <- counter + 1
d<-dealer(deck[counter],T)
countCard(deck[counter])
counter <- counter + 1
}
results[6] <- totalBet
return(results)
}
#strategy = 6: base strategy
#strategy = 12: doubling down
#strategy = 18: splitting and doubling down
s6 <- function(results, deck, terminate, strategy, cCards){
#when dealer's up card is 3,4,5,6, S1
#otherwise s2
if(strategy==6){
#play with split flag
pws = F
dDown = F
} else if (strategy==12){
pws=F
dDown=T
} else{
pws=T
dDown=T
}
runningCount <<- 0
cardsDealt <<- 0
totalBet<-0
counter <- 1
#deal first card to player and dealer
p<-playerS6(deck[counter],T, T)
countCard(deck[counter])
counter <- counter + 1
d<-dealer(deck[counter],T)
countCard(deck[counter])
counter <- counter + 1
#flag for whether to use s1 or s2
useS1 = F
#go through the deck, last game is with the termination card
while(counter<=terminate){
gameBet <- 1
#split hand flag
split=F
splitWithAce=F
doubledDown = F
doubledDownSplit = F
#calculate "True Count" = runningTotal/trunc((312-cardsDealt)/52)
tc <- ceiling(runningCount/trunc((312-cardsDealt)/52))
#if tc is negative, bet $1 as usual. otherwise bet $tc+2
##########
#custom strategy
##########
# if(!cCards){
#   #not playing with counting cards, set tc to -1
#   tc <- -1
# } else {
#   #cat("true count: ",tc,"\n")
#   #update game bet, if necessary
#   if (tc>-1){
#     if(tc>8){
#       gameBet<-10
#     } else {
#       gameBet <- tc+2
#     }
#   }
# }
############
#base strategy
############
if(!cCards){
#not playing with counting cards, set tc to -1
tc <- -1
} else {
#cat("true count: ",tc,"\n")
#update game bet, if necessary
if (tc>-1){
gameBet <- tc+2
}
}
#if playing with a split hand, check next card for possible split before dealing it
if(pws){
if(names(deck[counter])==names(p[[1]]) && p[[1]]!=5 && p[[1]]!=10){
#split the deck
split=T
gameBet <- gameBet +1
p2<-playerS6Split(deck[counter],T, F)
countCard(deck[counter])
#check for aces
if(names(deck[counter])=="A"){
#set ace value to 11
playerCards[1]<<-11
playerCardsSplit[1]<<-11
splitWithAce=T
}
counter <- counter + 1
#check dealer's up card and determine strategy to use
if(d[[1]]==3|d[[1]]==4|d[[1]]==5|d[[1]]==6){
#use s1
useS1 = T
} else {
useS1 = F
}
#deal second card to player hands and dealer
p<-playerS6(deck[counter],F, useS1)
countCard(deck[counter])
counter <- counter + 1
p2<-playerS6Split(deck[counter],F, useS1)
countCard(deck[counter])
counter <- counter + 1
d<-dealer(deck[counter],F)
countCard(deck[counter])
counter <- counter + 1
} else{
#check dealer's up card and determine strategy to use
if(d[[1]]==3|d[[1]]==4|d[[1]]==5|d[[1]]==6){
#use s1
useS1 = T
} else {
useS1 = F
}
#no split, play normally
#deal second card to player and dealer
p<-playerS6(deck[counter],F, useS1)
countCard(deck[counter])
counter <- counter + 1
d<-dealer(deck[counter],F)
countCard(deck[counter])
counter <- counter + 1
}
} else{
#check dealer's up card and determine strategy to use
if(d[[1]]==3|d[[1]]==4|d[[1]]==5|d[[1]]==6){
#use s1
useS1 = T
} else {
useS1 = F
}
#not playing with splitting
#deal second card to player and dealer
p<-playerS6(deck[counter],F, useS1)
countCard(deck[counter])
counter <- counter + 1
d<-dealer(deck[counter],F)
countCard(deck[counter])
counter <- counter + 1
}
#now have 2 cards in all hand(s)
#if doubling down, check before drawing any more cards
if (dDown){
#if the sum of the hand is 10 or 11, double the bet and only draw one card
if(sum(p[[1]])==11 || sum(p[[1]])==10){
#cat("doubled down: hand total",sum(p[[1]]),"\n")
gameBet <- gameBet*2
p<-playerS6(deck[counter],F, useS1)
countCard(deck[counter])
counter <- counter + 1
doubledDown=T
}
#if split, need to check the other hand too
if(split){
if(sum(p2[[1]])==11 || sum(p2[[1]])==10){
#cat("doubled down on split hand: hand total",sum(p2[[1]]),"\n")
if(doubledDown){
gameBet <- (3/2)*gameBet
} else {
gameBet <- gameBet*2
}
p2<-playerS6Split(deck[counter],F, useS1)
countCard(deck[counter])
counter <- counter + 1
doubledDownSplit=T
}
}
}
#finish hands, send boolean to determine which strategy in player to use
#finish hand(s) of player
if(!splitWithAce){
#original hand
if(!doubledDown){
while(!(p[[2]])){
p<-playerS6(deck[counter],F, useS1)
countCard(deck[counter])
counter <- counter + 1
}
}
#if there is also a split hand
if(split){
if(!doubledDownSplit){
while(!(p2[[2]])){
p2<-playerS6Split(deck[counter],F, useS1)
countCard(deck[counter])
counter <- counter + 1
}
}
}
}
#finish hand of dealer
while(!d[[2]]){
d<-dealer(deck[counter],F)
countCard(deck[counter])
counter <- counter + 1
}
#get the results of the game
totalBet <- totalBet + gameBet
if(split){
if(dDown){
r<-checkForWinner(unlist(p[1]),unlist(d[1]),p2[[1]], doublingdown=TRUE, tc=tc)
#r<-checkForWinnerVerbose(unlist(p[1]),unlist(d[1]),p2[[1]], doublingdown=TRUE, tc=tc)
} else{
r<-checkForWinner(unlist(p[1]),unlist(d[1]),p2[[1]], tc=tc)
#r<-checkForWinnerVerbose(unlist(p[1]),unlist(d[1]),p2[[1]], tc=tc)
}
results <- results+r
} else{
if(dDown){
r<-checkForWinner(unlist(p[1]),unlist(d[1]), doublingdown=T, tc=tc)
#r<-checkForWinnerVerbose(unlist(p[1]),unlist(d[1]), doublingdown=T, tc=tc)
} else {
r<-checkForWinner(unlist(p[1]),unlist(d[1]), tc=tc)
#r<-checkForWinnerVerbose(unlist(p[1]),unlist(d[1]), tc=tc)
}
results <- results+r
}
#deal first card of next game to player and dealer
p<-playerS6(deck[counter],T, T)
countCard(deck[counter])
counter <- counter + 1
d<-dealer(deck[counter],T)
countCard(deck[counter])
counter <- counter + 1
}
results[6] <- totalBet
return(results)
}
#######################
##Running Simulations##
#######################
#runs the different simulations.
#takes an argument x that shows which strategy to run
#1-6: strategies 1-6
#7-12: strategies 1-6 with splitting
#13-18: strategies 1-6 with splitting and doubling down
runSimulations <- function(x, cCards){
#initialize values to bind to return
numBlackJack <- numOtherWin <- 0
numTie <- numLoss<-numBust <-0
totalBet <-amtLeft <-0
#get the shuffled deck and termination card
deck <- shuffleCards(cards)
terminate <- deck[2]
terminate <- unlist(terminate)
deck <- deck[1]
deck<-unlist(deck)
if(missing(cCards)){
cCards <- F
}
results<-(cbind(numBlackJack,numOtherWin,numTie,numLoss,numBust,totalBet,amtLeft))
if(x==1 || x==7 || x==13){
results <- s1(results,deck,terminate, x, cCards)
} else if (x==2 || x==8 || x==14) {
results <- s2(results,deck,terminate, x, cCards)
} else if (x==3 || x==9 || x==15){
results <- s3(results,deck,terminate, x, cCards)
}else if (x==4 || x==10 || x==16) {
results <- s4(results,deck,terminate, x, cCards)
} else if (x==5 || x==11 || x==17) {
results <- s5(results,deck,terminate, x, cCards)
} else if (x==6 || x==12 || x==18){
results <- s6(results, deck, terminate, x, cCards)
}
return(results)
}
simRun <- 100000
# cat("Running Strategy 1 \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(1),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 2 \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(2),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 3 \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(3),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 4 \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(4),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 5 \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(5),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 6 \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(6),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
#
#
#
# cat("Running Strategy 1 with Doubling Down \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(7),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 2 with Doubling Down \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(8),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 3 with Doubling Down \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(9),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 4 with Doubling Down \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(10),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 5 with Doubling Down \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(11),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 6 with Doubling Down \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(12),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
#
#
#
#
# cat("Running Strategy 1 with Splitting and Doubling Down \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(13),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 2 with Doubling Down & Splitting \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(14),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 3 with Splitting and Doubling Down \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(15),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 4 with Doubling Down & Splitting \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(16),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 5 with Doubling Down & Splitting \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(17),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
#
# cat("Running Strategy 6 with Splitting and Doubling Down \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(18),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
# cat("Running Strategy 1 with Counting Cards \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(1, T),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
cat("Running Strategy 2 with Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(2, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
cat("Running Strategy 3 with Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(3, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
cat("Running Strategy 4 with Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(4, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
cat("Running Strategy 5 with Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(5, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
# cat("Running Strategy 6 with Counting Cards \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(6, T),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
# cat("Running Strategy 1 with Doubling Down and Counting Cards \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(7, T),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
cat("Running Strategy 2 with Doubling Down and Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(8, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
cat("Running Strategy 3 with Doubling Down and Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(9, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
cat("Running Strategy 4 with Doubling Down and Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(8, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
cat("Running Strategy 5 with Doubling Down and Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(11, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
# cat("Running Strategy 6 with Doubling Down and Counting Cards \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(12, T),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
# cat("Running Strategy 1 with Splitting, Doubling Down, and Counting Cards \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(13, T),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
cat("Running Strategy 2 with Splitting, Doubling Down, and Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(14, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
cat("Running Strategy 3 with Splitting and Doubling Down and Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(15, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
cat("Running Strategy 4 with Splitting, Doubling Down, and Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(16, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
cat("Running Strategy 5 with Splitting, Doubling Down, and Counting Cards \n")
finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(17, T),FUN="+")))
names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
finalResults
cat("\n")
# cat("Running Strategy 6 with Splitting and Doubling Down and Counting Cards \n")
# finalResults <- rowSums(sapply(1:simRun,function(i) sapply(X=runSimulations(18, T),FUN="+")))
# names(finalResults) <- c("BlackJack","OtherWin","Tie","Loss","Bust","TotalBet","AmtLeft")
# finalResults
# cat("\n")
